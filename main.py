from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from config import token
from func import from_gmail_catcher
from keyboards import kb_main, kb_info, kb_main_reg, kb_feedback_aprove
from keyboards import kb_day1, kb_day2, kb_day3, kb_day4, kb_day5, kb_day6
from keyboards import kb_main_admin
from aiogram.dispatcher.filters import Text
from sql import reg_checker, qr_sender
from stateClasses import FeedbackState, AnswerState
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from sql import admin_catcher, quest_insert, answer_caughter,answer_collect
from sql import take_gmail_user, create_table_main, create_table_feedback, create_db
from sql import create_table_admins, create_table_from_gmail, create_table_questions
from tenacity import retry, wait_random


bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())

'''
@dp.errors_handler(exception=exceptions.NetworkError)
async def error_handler(event):
    print(f'Critical error caused by {event.exception}')
    return True
'''

@dp.message_handler(commands=['start'])
@dp.message_handler(Text(equals='–°—Ç–æ–ø'))
@dp.message_handler(Text(equals='–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω'))
async def start_comm(message: types.Message):
    if message.from_id in admin_catcher():
        await bot.send_message(message.from_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ç–µ–±—è –∞–¥–º–∏–Ω!', reply_markup=kb_main_admin)
    elif reg_checker(message.from_id):
        await bot.send_message(message.from_id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ "–®–∫–æ–ª–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –†–ë–ü–û"!', reply_markup=kb_main_reg)
    elif not reg_checker(message.from_id):
        await bot.send_message(message.from_id,
                               '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ "–®–∫–æ–ª–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –†–ë–ü–û"!',
                               reply_markup=kb_main)


@dp.message_handler(Text(equals='–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ü–∏–∫–ª–µ –ª–µ–∫—Ü–∏–π'))
async def info(message: types.Message):
    photo = InputFile('images/info.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id,'–í–µ—Å—å —Ü–∏–∫–ª –ª–µ–∫—Ü–∏–π —Ä–∞–∑–±–∏—Ç –Ω–∞ 6 –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=kb_info)


@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥'))
async def back_info(message: types.Message):
    await bot.send_message(message.from_id,'–í–µ—Å—å —Ü–∏–∫–ª –ª–µ–∫—Ü–∏–π —Ä–∞–∑–±–∏—Ç –Ω–∞ 6 –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=kb_info)


@dp.message_handler(Text(equals='1) –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'))
async def day1(message: types.Message):
    photo = InputFile('images/day1.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day1)


@dp.message_handler(Text(equals='2) –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö'))
async def day2(message: types.Message):
    photo = InputFile('images/day2.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day2)


@dp.message_handler(Text(equals='3) –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è'))
async def day3(message: types.Message):
    photo = InputFile('images/day3.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day3)


@dp.message_handler(Text(equals='4) –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã'))
async def day4(message: types.Message):
    photo = InputFile('images/day4.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day4)


@dp.message_handler(Text(equals='5) –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ü–û'))
async def day5(message: types.Message):
    photo = InputFile('images/day5.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day5)



@dp.message_handler(Text(equals='6) –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑'))
async def day6(message: types.Message):
    photo = InputFile('images/day6.jpg')
    await bot.send_photo(message.from_id, photo=photo)
    await bot.send_message(message.from_id, '–û–±—â–∞—è –∏–Ω—Ñ–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å', reply_markup=kb_day6)


@dp.message_handler(Text(equals='–Ø–¥—Ä–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã "Linux"'))
async def day1_1(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ì–µ–æ—Ä–≥–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á –ö—É—Ä—è—á–∏–π (–≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ <b>–û–û–û ¬´–ë–∞–∑–∞–ª—å—Ç –°–ü–û¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥—Ä–∞ Linux: —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö Linux. –ü–æ–¥—Ö–æ–¥—ã –∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é –û–°, –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã –ê–ª—å—Ç, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ü–û.

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–ú–∏–∫—Ä–æ—è–¥–µ—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ KasperskyOS'))
async def day1_2(message: types.Message):
    text = '''
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫–∏</u></b>:
‚û°Ô∏è –°–µ—Ä–≥–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á –†–æ–≥–∞—á–µ–≤ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã <b>–ê–û ¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª</b>);
‚û°Ô∏è –î–º–∏—Ç—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á –®–º–æ–π–ª–æ–≤ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ <b>–ê–û ¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ú–∏–∫—Ä–æ—è–¥–µ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. Summa Technologiae.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è –ú–∏–∫—Ä–æ—è–¥–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–º–µ–µ—Ç —Ä—è–¥ –Ω–µ–æ—Å–ø–æ—Ä–∏–º—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø–µ—Ä–µ–¥ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–º —è–¥—Ä–æ–º. –í—Å–µ –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤ –∞–Ω–æ–Ω—Å–∏—Ä—É—é—Ç –≤—ã–ø—É—Å–∫ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –º–∏–∫—Ä–æ—è–¥–µ—Ä–Ω—ã—Ö –û–°.–õ–µ–∫—Ü–∏—è –æ—Å–≤–µ—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –º–∏–∫—Ä–æ—è–¥–µ—Ä–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –µ–µ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —è—Ä–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π, –∫–∞–∫ –º–∏–∫—Ä–æ—è–¥–µ—Ä–Ω—ã–µ –û–° –≤—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û –∏ –∫–∞–∫–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–º–µ—é—Ç –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ shift-left

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è     
'''
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö'))
async def day2_1(message: types.Message):
    text = '''
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ò–≤–∞–Ω –ï–≤–≥–µ–Ω—å–µ–≤–∏—á –ü–∞–Ω—á–µ–Ω–∫–æ (–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ <b>–û–û–û ¬´–ü–æ—Å—Ç–≥—Ä–µ—Å –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π¬ª / ¬´Postgres Professional¬ª</b>)

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç Ô∏èÔ∏èÔ∏è‚Äç–ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è      
'''
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ "Linux"'))
async def day2_2(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –†–æ–º–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –°–∏–º–∞–∫–æ–≤ (–¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ <b>–û–û–û ¬´–†–µ–¥ –°–æ—Ñ—Ç¬ª</b>)

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –†–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Ä–æ–ª—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç Ô∏è–†–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ë–î –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã —Ö—Ä–∞–Ω–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –°–∏—Å—Ç–µ–º. –≠—Ç–æ –∏–∑–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤. –í –ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –°–£–ë–î –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è     
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–°–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏'))
async def day3_1(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –î—É–±–∏–Ω–∏–Ω (—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ <b>¬´YADRO¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è - –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç Ô∏èÔ∏è‚Äç–ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è    
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥'))
async def day3_2(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫–∏</u></b>:
‚û°Ô∏è –°–æ—Ä–æ–∫–∏–Ω –î–º–∏—Ç—Ä–∏–π –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä <b>–û–û–û ¬´–ë–∞–∑–∏—Å¬ª</b>).
‚û°Ô∏è –°–æ—Ä–æ–∫–∏–Ω –î–º–∏—Ç—Ä–∏–π –ò–≥–æ—Ä–µ–≤–∏—á (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –±–ª–æ–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —è–¥—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã <b>–û–û–û ¬´–ë–∞–∑–∏—Å¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç Ô∏è–ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—É—Ç–∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è     
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='JVM Internals'))
async def day4_1(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î—Ä–æ–∑–¥–æ–≤ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ <b>¬´Axiom JDK¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è Java VM - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è      
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python'))
async def day4_2(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ù–∏–∫–∏—Ç–∞ –ê–Ω–¥—Ä–µ–µ–≤–∏—á –°–æ–±–æ–ª–µ–≤ (–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π open-source —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è Python - –∏—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –∑–Ω–∞—é—Ç –∏ –ª—é–±—è—Ç Python, –Ω–æ –Ω–µ –≤—Å–µ –∑–Ω–∞—é—Ç, –∫–∞–∫ –æ–Ω —É—Å—Ç—Ä–æ–µ–Ω –≤–Ω—É—Ç—Ä–∏. –õ–µ–∫—Ü–∏—è –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–Ω–æ —Ä–∞—Å–∫—Ä–æ–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
- –ö–∞–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ (AST)
- –ö–∞–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏?
- –ö–∞–∫ –∏–∑ AST –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–∞–π—Ç–∫–æ–¥?
- –ö–∞–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ—Å—Ç—å –Ω–∞ —à–∞–≥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–π—Ç–∫–æ–¥–∞ (Tier1, Tier2, JIT)
- –ß—Ç–æ —Ç–∞–∫–æ–µ C-API, –∏ –ø–æ—á–µ–º—É –æ–Ω –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–∞–∂–µ–Ω –¥–ª—è CPython?

–õ–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞ —Å–ø–∏–∫–µ—Ä –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏–¥–µ—è–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ.

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è     
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–°–∏—Å—Ç–µ–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–ó–ò –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏'))
async def day5_1(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –í–∏—Ç–∞–ª–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á –õ—é—Ç–∏–∫–æ–≤ (–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ <b>–§–°–¢–≠–ö –†–æ—Å—Å–∏–∏</b>)

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –°–∏—Å—Ç–µ–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–ó–ò –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è        
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è–¥—Ä–∞ "Linux"'))
async def day5_2(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ê—Ä—É—Ç—é–Ω –ò—à—Ö–∞–Ω–æ–≤–∏—á –ê–≤–µ—Ç–∏—Å—è–Ω (–¥–∏—Ä–µ–∫—Ç–æ—Ä, –∞–∫–∞–¥–µ–º–∏–∫ –†–ê–ù <b>–ò–°–ü –†–ê–ù</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è–¥—Ä–∞ "Linux".

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è   
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'))
async def day6_1(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –°–º–∏—Ä–Ω–æ–≤ (–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä <b>–û–û–û ¬´–ü—Ä–æ—Ñ–∏—Å–∫–æ–ø¬ª / ¬´CodeScoring¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Open Source.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –í –ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—ã –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Open Source –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –æ—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞, –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è   
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Kubernetes'))
async def day6_2(message: types.Message):
    text = """
üë©‚Äçüíª <b><u>–î–æ–∫–ª–∞–¥—á–∏–∫</u></b>:
‚û°Ô∏è –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á –ï–≤–¥–æ–∫–∏–º–æ–≤ (–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä <b>–û–û–û ¬´–ö–ª–∞—É–¥–†–∞–Ω¬ª / ¬´Luntry¬ª</b>).

üìö <b><u>–¢–µ–º–∞</u></b>:
‚û°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Kubernetes.

üìü <b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</u></b>:
‚û°Ô∏è Ô∏è‚Äç –ê–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è

‚ÄºÔ∏è <b><u>–ù–∞—á–∞–ª–æ</u></b>: DD.MM.YYYY –≤ HH:MM‚ÄºÔ∏è    
"""
    await bot.send_message(message.from_id, text, parse_mode="html")


@dp.message_handler(Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
async def register(message: types.Message):
    mess = ''
    user = message.from_user.username
    data = take_gmail_user(user)
    if data:

        await bot.send_message(message.from_id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è:')
        data = [f'–î–µ–Ω—å {i}\n' for i in sorted(data, key=lambda x: x.split('. ')[0])]
        print(data)
        for i in data:
            mess += f'{i}\n'
        await bot.send_message(message.from_id, mess)
        await bot.send_message(message.from_id, '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\nhttps://forms.yandex.ru/u/65ba63fbeb61460b91183250/', reply_markup=kb_main_reg)
    # qr_name = qr_maker(message.from_id, 'test')
    # users_register(message.from_id, 'test_day', qr_name)
    else:
        await bot.send_message(message.from_id, '–í—ã –µ—â–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–∏ —Å–æ–±—ã—Ç–∏—è, –ø–æ—Ä–∞ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\nhttps://forms.yandex.ru/u/65ba63fbeb61460b91183250/', reply_markup=kb_main_reg)


@dp.message_handler(Text(equals='–ü—Ä–æ–ø—É—Å–∫–∞'))
async def passer(message: types.Message):
    qr_list = qr_sender(message.from_id)
    for i in qr_list:
        photo = InputFile(f'qr_codes/{i}')
        await bot.send_message(message.from_id, f'{message.from_user.username}, –í–∞—à –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ –ª–µ–∫—Ü–∏—é "–ø—É–ø—É–ø–ø—É–ø—É–ø"')
        await bot.send_photo(message.from_id, photo=photo)

#-1002007643494

@dp.message_handler(Text(equals='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
async def callback(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_id, '‚ùó–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª</b> –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. ', reply_markup=kb_feedback_aprove, parse_mode="HTML")


@dp.message_handler(Text(equals='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
async def callback_d(message: types.Message):
    await bot.send_message(message.from_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º!',
                           reply_markup=kb_feedback_aprove)
    await FeedbackState.take_quest.set()


@dp.message_handler(state=FeedbackState.take_quest)
async def feedback_sender(message: types.Message, state: FSMContext):
    quest_insert(message.text, message.from_id)
    await bot.send_message(message.from_id, '–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç', reply_markup= kb_main_reg)
    await state.finish()



@dp.message_handler(Text(equals='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'))
async def answering(message: types.Message, state: FSMContext):
    try:
        quest_text, id = answer_caughter(message.from_id)
        if id == message.from_id or id == None:
                    mess = f"""
üë©‚Äçüéì–ê–≤—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞: {quest_text['tg_id']}

‚ùì–í–æ–ø—Ä–æ—Å: {quest_text['quest']}

‚ùó–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:
        """
                    await bot.send_message(message.from_id, mess, reply_markup=kb_main_admin)
                    await state.update_data(user_id=quest_text['tg_id'])
                    await state.update_data(uid=quest_text['uid'])
                    await AnswerState.take_response.set()
        else:
            await bot.send_message(message.from_id, '–ù–∞ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –í–∞–º –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–∞—é—Ç, –≤–æ–ø—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π <b>¬´–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã¬ª</b> –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', parse_mode='HTML')

    except:
        await bot.send_message(message.from_id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç!')


@dp.message_handler(state=AnswerState.take_response)
async def take_resp(message: types.Message, state: FSMContext):
    await state.update_data(take_response=message.text)
    data = await state.get_data()
    uid = data.get('uid')
    answer_collect(uid,message.text)
    await bot.send_message(data.get('user_id'),message.text)
    await state.finish()
    await bot.send_message(message.from_id, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!',reply_markup=kb_main_admin)


@retry(wait=wait_random(min=1, max=2))
def main():
    create_db()
    create_table_main()
    create_table_feedback()
    create_table_questions()
    create_table_admins()
    create_table_from_gmail()
    from_gmail_catcher()
    executor.start_polling(dp, skip_updates=True, timeout=20)


if __name__ == '__main__':
    main()
