import os
from amzqr import amzqr
import imaplib
import email
import base64
from bs4 import BeautifulSoup
import json
from sql import gmail_catcher
from threading import Timer
from sql import quest_checker, sql_tg_id_catcher, sql_uid_cather


MAIL_CHECK_TIMER = None
MAIL_CHECK_DELAY = 30
DB_CHECK_TIMER = None
DB_CHECK_DELAY = 5
def qr_maker(tg_id, day):
    name = f'qr_{tg_id}.png'
    version, level, qr_name = amzqr.run(
        words=f'',
        version=1,
        level='H',
        picture='qr_codes/bg.jpg',
        colorized=True,
        contrast=1.0,
        brightness=1.0,
        save_name=f'qr_codes/{name}',
        save_dir=os.getcwd()
    )
    return name


def from_gmail_catcher():
    print("Checking mail for forms")
    global MAIL_CHECK_TIMER
    if MAIL_CHECK_TIMER:
        MAIL_CHECK_TIMER.cancel()
        MAIL_CHECK_TIMER = None
    list_g = []
    mail_pass = "spku kxbv suwv rwel"
    username = "pochtapeckinbmstu@gmail.com"
    imap_server = "imap.gmail.com"
    imap = imaplib.IMAP4_SSL(imap_server)
    imap.login(username, mail_pass)
    imap.select("INBOX")
    for i in imap.uid('search', "UNSEEN", "ALL")[1][0].split():
        res, msg = imap.uid('fetch', i, '(RFC822)')
        msg = email.message_from_bytes(msg[0][1])
        for part in msg.walk():
            if part.get_content_maintype() == 'text':
                data = base64.b64decode(part.get_payload()).decode()
                soup = BeautifulSoup(data, 'html.parser')
                info = list(filter(lambda x: x and '—Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Yandex Forms. –Ø–Ω–¥–µ–∫—Å –Ω–µ –Ω–µ—Å—ë—Ç' not in x,
                                   map(lambda x: x.strip(), soup.find('pre').text.split('\n'))))
                form_id = info[0]
                form_data = json.loads(info[1])
                tg_id = form_data.get('–í–∞—à Telegram', '').strip().lstrip('@')
                for i in filter(lambda x: x and x.strip(), form_data['–ö–∞–∫–∏–µ –¥–Ω–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?'].split('–î–µ–Ω—å')):
                    gmail_catcher(form_id.strip(), form_data.get('–§–∞–º–∏–ª–∏—è','').strip(), form_data.get('–ò–º—è', '').strip(), form_data.get('–û—Ç—á–µ—Å—Ç–≤–æ', '').strip(), i.strip(), form_data.get('–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ / –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '').strip(), form_data.get('–í–∞—à–∞ –ø–æ—á—Ç–∞', '').strip(), tg_id)
    MAIL_CHECK_TIMER = Timer(MAIL_CHECK_DELAY, from_gmail_catcher)
    MAIL_CHECK_TIMER.start()


def quest_frame_checker():
    data = quest_checker()
    global DB_CHECK_TIMER
    if DB_CHECK_TIMER:
        DB_CHECK_TIMER.cancel()
    if data != 0:
        return f'–ü–æ–¥—ä–µ—Ö–∞–ª–∏ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {data}\n–ü–æ—Ä–∞ –æ—Ç–≤–µ—á–∞—Ç—å‚ùó'

    DB_CHECK_TIMER = Timer(DB_CHECK_DELAY, quest_frame_checker)
    DB_CHECK_TIMER.start()


def uid_generator():
    ans=[]
    all_data = sql_uid_cather()
    for data in all_data:
        url_code = base64.b64encode((f"{data[0]}_1").encode("UTF-8"))
        final_code = str(url_code).split("'")[1].strip("==")
        username = data[4]
        mess = f"""
{data[2]} {data[3]}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –í–∞–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–π–¥—É—Ç –ø–µ—Ä–≤—ã–µ –ª–µ–∫—Ü–∏–∏ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—é –≤ –†–æ—Å—Å–∏–∏ –∏ –≤ –º–∏—Ä–µ ¬´ (https://secure-software.bmstu.ru/)–®–∫–æ–ª–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –†–ë–ü–û (https://secure-software.bmstu.ru/)¬ª (https://secure-software.bmstu.ru/)üíõ

https://secure-software.bmstu.ru/confirm.html?register=remote&uid={final_code}
https://rbpo-school-validation.tw1.ru:1830/visited?uid={final_code}

üìç –ì–¥–µ? 
–ú–∞–ª—ã–π –ó–∞–ª –¶–ö–ò (–ì–£–ö, –Ω–∞–¥ –î–æ–º–æ–º –§–∏–∑–∏–∫–∏)

üìç –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–Ω—è:

¬´–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–¥—Ä–∞ Linux: —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª¬ª. 
‚è≤11:00 - 13:00
üë•–°–ø–∏–∫–µ—Ä: –ì–µ–æ—Ä–≥–∏–π –ö—É—Ä—è—á–∏–π, –≤–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –û–° ¬´–ê–ª—å—Ç¬ª (https://www.basealt.ru/) –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏ (–í–ú–ö) –ú–ì–£.üòÄ
üîî –ê–Ω–æ–Ω—Å

‚ùóÔ∏è–ö–æ—Ñ–µ-–±—Ä–µ–π–∫: 13:00-13:30

¬´–ú–∏–∫—Ä–æ—è–¥–µ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. Summa technologiae¬ª. 
‚è≤13:30 - 15:30
üë•–°–ø–∏–∫–µ—Ä—ã: –°–µ—Ä–≥–µ–π –†–æ–≥–∞—á–µ–≤,
—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∏ —à–∏—Ä–æ–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –î–º–∏—Ç—Ä–∏–π –®–º–æ–π–ª–æ–≤, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª (https://os.kaspersky.ru/development/)        
        
"""
        tg_id = sql_tg_id_catcher(username)
        if tg_id == None:
            continue
        else:
            tg_id = tg_id[0]

        user = {"tg_id": tg_id, "mess": mess,
                "mail": "kirill.gluhov2003@yandex.ru"}
        ans.append(user)

    return ans

# print(uid_generator())


