import os
from amzqr import amzqr
import imaplib
import email
import base64
from bs4 import BeautifulSoup
import json
from sql import gmail_catcher, qr_flag_tg_checker
from threading import Timer
from sql import quest_checker, sql_tg_id_catcher, sql_uid_cather


MAIL_CHECK_TIMER = None
MAIL_CHECK_DELAY = 30
DB_CHECK_TIMER = None
DB_CHECK_DELAY = 5
def qr_maker(uid):
    name = f'qr1_{uid}.png'
    version, level, qr_name = amzqr.run(
        words=f'https://rbpo-school-validation.tw1.ru:1830/visited?uid={uid}',
        version=1,
        level='H',
        picture='qr_codes/bg.jpg',
        colorized=True,
        contrast=1.0,
        brightness=1.0,
        save_name=f'qr_codes/{name}',
        save_dir=os.getcwd()
    )
    return name


def from_gmail_catcher():
    print("Checking mail for forms")
    global MAIL_CHECK_TIMER
    if MAIL_CHECK_TIMER:
        MAIL_CHECK_TIMER.cancel()
        MAIL_CHECK_TIMER = None
    list_g = []
    mail_pass = "spku kxbv suwv rwel"
    username = "pochtapeckinbmstu@gmail.com"
    imap_server = "imap.gmail.com"
    imap = imaplib.IMAP4_SSL(imap_server)
    imap.login(username, mail_pass)
    imap.select("INBOX")
    for i in imap.uid('search', "UNSEEN", "ALL")[1][0].split():
        res, msg = imap.uid('fetch', i, '(RFC822)')
        msg = email.message_from_bytes(msg[0][1])
        for part in msg.walk():
            if part.get_content_maintype() == 'text':
                data = base64.b64decode(part.get_payload()).decode()
                soup = BeautifulSoup(data, 'html.parser')
                info = list(filter(lambda x: x and '—Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Yandex Forms. –Ø–Ω–¥–µ–∫—Å –Ω–µ –Ω–µ—Å—ë—Ç' not in x,
                                   map(lambda x: x.strip(), soup.find('pre').text.split('\n'))))
                form_id = info[0]
                form_data = json.loads(info[1])
                tg_id = form_data.get('–í–∞—à Telegram', '').strip().lstrip('@')
                for i in filter(lambda x: x and x.strip(), form_data['–ö–∞–∫–∏–µ –¥–Ω–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?'].split('–î–µ–Ω—å')):
                    gmail_catcher(form_id.strip(), form_data.get('–§–∞–º–∏–ª–∏—è','').strip(), form_data.get('–ò–º—è', '').strip(), form_data.get('–û—Ç—á–µ—Å—Ç–≤–æ', '').strip(), i.strip(), form_data.get('–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ / –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '').strip(), form_data.get('–í–∞—à–∞ –ø–æ—á—Ç–∞', '').strip(), tg_id)
    MAIL_CHECK_TIMER = Timer(MAIL_CHECK_DELAY, from_gmail_catcher)
    MAIL_CHECK_TIMER.start()


def quest_frame_checker():
    data = quest_checker()
    global DB_CHECK_TIMER
    if DB_CHECK_TIMER:
        DB_CHECK_TIMER.cancel()
    if data != 0:
        return f'–ü–æ–¥—ä–µ—Ö–∞–ª–∏ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {data}\n–ü–æ—Ä–∞ –æ—Ç–≤–µ—á–∞—Ç—å‚ùó'

    DB_CHECK_TIMER = Timer(DB_CHECK_DELAY, quest_frame_checker)
    DB_CHECK_TIMER.start()


def uid_generator():
    ans=[]
    all_data = sql_uid_cather()
    print("ALL",all_data)
    for data in all_data:
        url_code = base64.b64encode((f"{data[0]}_2").encode("UTF-8"))
        final_code = str(url_code).split("'")[1].strip("==")
        username = data[4]
        qr_fname = qr_maker(final_code)
        mess = f"""
{data[2]} {data[3]}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –í–∞–º, —á—Ç–æ 27 –º–∞—Ä—Ç–∞ –ø—Ä–æ–π–¥–µ—Ç –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞ –ª–µ–∫—Ü–∏–π –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—é –≤ –†–æ—Å—Å–∏–∏ –∏ –≤ –º–∏—Ä–µ ¬´–®–∫–æ–ª—ã —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –†–ë–ü–û¬ª

–ï—Å–ª–∏ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—á–Ω–æ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ (QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é):
https://secure-software.bmstu.ru/confirm.html?register=real&uid={final_code}

–ï—Å–ª–∏ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–Ω–æ:
https://secure-software.bmstu.ru/confirm.html?register=remote&uid={final_code}


üìç –ì–¥–µ? 
–ú–∞–ª—ã–π –ó–∞–ª –î–≤–æ—Ä—Ü–∞ –∫—É–ª—å—Ç—É—Ä—ã (–ú–ó–î–ö) –ú–ì–¢–£ –∏–º. –ù.–≠. –ë–∞—É–º–∞–Ω–∞ (–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å, –Ω–∞–¥ –î–æ–º–æ–º –§–∏–∑–∏–∫–∏), 2-—è –ë–∞—É–º–∞–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞, 5—Å2 (–Ω–∏–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã —Å—Ö–µ–º—ã –ø—Ä–æ—Ö–æ–¥–∞)

üìç –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–Ω—è:

‚ùó¬´–ò—Å—Ç–æ—Ä–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –°–£–ë–î –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ Postgres¬ª. 
‚è≤13:00 - 15:00
üë•–°–ø–∏–∫–µ—Ä: –ò–≤–∞–Ω –ü–∞–Ω—á–µ–Ω–∫–æ, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ—Ä–µ–∫—Ç–æ—Ä–∞ "Postgres Professional".

‚ùóÔ∏è–ö–æ—Ñ–µ-–±—Ä–µ–π–∫: 15:00-15:30

‚ùó¬´–†–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –°–£–ë–î: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª. 
‚è≤15:30 - 17:30
üë•–°–ø–∏–∫–µ—Ä—ã: –î–º–∏—Ç—Ä–∏–π –ï–º–∞–Ω–æ–≤, –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –°–£–ë–î "–†–µ–¥ –°–æ—Ñ—Ç"

–†–æ–º–∞–Ω –°–∏–º–∞–∫–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–†–µ–¥ –°–æ—Ñ—Ç".        

Ô∏èÔ∏èÔ∏è‚ùó–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ú–ì–¢–£ –∏–º. –ù. –≠. –ë–∞—É–º–∞–Ω–∞!

Ô∏èÔ∏èÔ∏è‚ùó–ö—Ä–∞–π–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–±—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ –ø–æ–ª —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!

Ô∏èÔ∏èÔ∏è‚ùó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é: https://rutube.ru/channel/35564652/about/
        
"""
        tg_id = sql_tg_id_catcher(username)
        if tg_id == None:
            continue
        else:
            tg_id = tg_id[0]

        user = {"tg_id": tg_id, "mess": mess,
                # "mail": "kirill.gluhov2003@yandex.ru",
                "qr": qr_fname}
        ans.append(user)
        qr_flag_tg_checker(username)

    return ans

# print(uid_generator())


